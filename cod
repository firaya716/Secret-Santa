import telebot
import json
import random
from telebot import types

# Инициализация бота
API_TOKEN = 'TOKEN'
bot = telebot.TeleBot(API_TOKEN)


# Переменные для хранения состояния
user_states = {}  # Словарь для хранения состояний пользователей

# Функция для загрузки данных из JSON
def load_data():
    try:
        with open('data.json', 'r') as f:
            data = json.load(f)
            if 'users' not in data:
                data['users'] = {}
            if 'games' not in data:
                data['games'] = {}
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {"users": {}, "games": {}}

# Функция для сохранения данных в JSON
def save_data(data):
    with open('data.json', 'w') as f:
        json.dump(data, f)

# Команда /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "Добро пожаловать в Тайного Санту! Используйте /register для регистрации.")

# Регистрация пользователя
@bot.message_handler(commands=['register'])
def register(message):
    data = load_data()
    user_id = message.from_user.id
    username = message.from_user.username
    
    if str(user_id) in data['users']:
        bot.send_message(message.chat.id, "Вы уже зарегистрированы.")
    else:
        data['users'][str(user_id)] = {"points": 0, "username": username, "game": None}
        save_data(data)
        bot.send_message(message.chat.id, "Вы успешно зарегистрированы!")




   # Создаем кнопки
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    create_game_button = types.KeyboardButton("Создать игру")
    join_game_button = types.KeyboardButton("Присоединиться к игре")
    view_players_button = types.KeyboardButton("Просмотреть игроков")
    assign_santa_button = types.KeyboardButton("Назначить Тайного Санту")
    guess_santa_button = types.KeyboardButton("Угадать Тайного Санту")
    view_points_button = types.KeyboardButton("Просмотреть баллы")
    markup.add(create_game_button, join_game_button, view_players_button, assign_santa_button, guess_santa_button, view_points_button)
    
    bot.send_message(message.chat.id, "Выберите действие:", reply_markup=markup)

# Обработка нажатий на кнопки
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    data = load_data()  # Загружаем данные при каждом нажатии
    games = data.get('games', {})  # Получаем игры из загруженных данных
    users = data.get('users', {})  # Получаем пользователей из загруженных данных

    if message.text == "Создать игру":
        bot.send_message(message.chat.id, "Вы выбрали создать игру. Пожалуйста, введите название игры.")
        user_states[message.chat.id] = 'waiting_for_game_name'  # Сохраняем состояние пользователя

    elif message.text == "Присоединиться к игре":
        bot.send_message(message.chat.id, "Вы выбрали присоединиться к игре. Пожалуйста, введите ID игры.")
        user_states[message.chat.id] = 'waiting_for_game_id'  # Сохраняем состояние для ID игры

    elif message.text == "Просмотреть игроков":
        user_id = message.from_user.id
        user_game_id = users.get(str(user_id), {}).get("game")  # Получаем ID игры пользователя

        if user_game_id is None:
            bot.send_message(message.chat.id, "Вы не присоединились ни к одной игре.")
        else:
            players_in_game = [user["username"] for user in users.values() if user["game"] == user_game_id]
            if players_in_game:
                players_list = "\n".join(players_in_game)
                bot.send_message(message.chat.id, f"Игроки в вашей игре:\n{players_list}")
            else:
                bot.send_message(message.chat.id, "В вашей игре пока нет участников.")

    elif message.text == "Назначить Тайного Санту":
        user_id = message.from_user.id
        user_game_id = users.get(str(user_id), {}).get("game")  # Получаем ID игры пользователя

        if user_game_id is None:
            bot.send_message(message.chat.id, "Вы не присоединились ни к одной игре.")
        else:
            # Получаем всех участников игры
            players_in_game = [user_id for user_id in users if users[user_id]["game"] == user_game_id]
            if len(players_in_game) < 2:
                bot.send_message(message.chat.id, "Недостаточно участников для назначения Тайного Санты.")
                return
            
            # Перемешиваем список участников и назначаем Тайного Санта
            random.shuffle(players_in_game)
            assignments = {players_in_game[i]: players_in_game[(i + 1) % len(players_in_game)] for i in range(len(players_in_game))}
            
            # Сохраняем назначения в данных пользователей
            for player in players_in_game:
                users[player]["santa"] = assignments[player]
                
            save_data({"users": users, "games": games})  # Сохраняем изменения в файле

            # Отправляем каждому участнику его Тайного Санту
            for player in players_in_game:
                santa_username = users[assignments[player]]["username"]
                bot.send_message(player, f"Ваш Тайный Санта: {santa_username}")

            bot.send_message(message.chat.id, "Тайные Санты успешно назначены!")

    elif message.text == "Угадать Тайного Санту":
        bot.send_message(message.chat.id, "Введите username вашего Тайного Санты.")
        user_states[message.chat.id] = 'waiting_for_guess'  # Сохраняем состояние для угадывания

    elif message.text == "Просмотреть баллы":
        user_id = message.from_user.id
        points = users.get(str(user_id), {}).get("points", 0)
        bot.send_message(message.chat.id, f"Ваши баллы: {points}")

    elif message.chat.id in user_states:
        if user_states[message.chat.id] == 'waiting_for_game_name':
            game_name = message.text
            game_id = len(games) + 1  # Генерируем ID игры
            games[game_id] = game_name  # Сохраняем игру в словаре
            
            # Обновляем информацию о пользователе
            users[str(message.from_user.id)]["game"] = game_id
            
            save_data({"users": users, "games": games})  # Сохраняем изменения в файле
            bot.send_message(message.chat.id, f"Принято! Ваше название: '{game_name}'.\nID вашей игры: {game_id}.")
            del user_states[message.chat.id]  # Удаляем состояние после обработки

        elif user_states[message.chat.id] == 'waiting_for_game_id':
            game_id = message.text
            if game_id.isdigit() and int(game_id) in games:
                game_name = games[int(game_id)]
                users[str(message.from_user.id)]["game"] = int(game_id)  # Обновляем информацию о пользователе
                save_data({"users": users, "games": games})  # Сохраняем изменения в файле
                
                bot.send_message(message.chat.id, f"Принято! Вы присоединились к игре под названием '{game_name}'.")
            else:
                bot.send_message(message.chat.id, "Неверный ID игры. Пожалуйста, попробуйте снова.")
            del user_states[message.chat.id]  # Удаляем состояние после обработки

        elif user_states[message.chat.id] == 'waiting_for_guess':
            guessed_username = message.text
            user_id = message.from_user.id
            actual_santa_id = users.get(str(user_id), {}).get("santa")  # Получаем ID Тайного Санты пользователя
            
            if actual_santa_id is None:
                bot.send_message(message.chat.id, "Вы еще не получили своего Тайного Санту.")
                del user_states[message.chat.id]
                return
            
            actual_santa_username = users[actual_santa_id]["username"]

            if guessed_username.lower() == actual_santa_username.lower():
                users[str(user_id)]["points"] += 5
                bot.send_message(message.chat.id, "Поздравляем! Вы угадали своего Тайного Санту и получили 5 баллов!")
            else:
                users[str(user_id)]["points"] -= 3
                bot.send_message(message.chat.id, f"К сожалению, это неверно. Вы потеряли 3 балла. Ваш Тайный Санта был: {actual_santa_username}.")
            
            save_data({"users": users, "games": games})  # Сохраняем изменения в файле
            del user_states[message.chat.id]  # Удаляем состояние после обработки





# Инлайн-кнопки
@bot.message_handler(commands=['menu'])
def menu(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    create_game_button = telebot.types.InlineKeyboardButton("Создать игру", callback_data="create_game")
    register_button = telebot.types.InlineKeyboardButton("Зарегистрироваться", callback_data="register")
    guess_button = telebot.types.InlineKeyboardButton("Угадать игрока", callback_data="guess")
    scoreboard_button = telebot.types.InlineKeyboardButton("Смотреть баллы", callback_data="scoreboard")
    
    keyboard.add(create_game_button)
    keyboard.add(register_button)
    keyboard.add(guess_button)
    keyboard.add(scoreboard_button)
    
    bot.send_message(message.chat.id, "Выберите действие:", reply_markup=keyboard)

# Обработка нажатий на инлайн-кнопки
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "create_game":
        bot.send_message(call.message.chat.id, "Создание игры... используйте /create_game для создания.")
    elif call.data == "register":
        bot.send_message(call.message.chat.id, "Регистрация... используйте /register для регистрации.")
    elif call.data == "guess":
        bot.send_message(call.message.chat.id, "Угадывание игрока... используйте /guess для угадывания (по username).")
    elif call.data == "scoreboard":
        scoreboard(call.message)  # Вызываем функцию scoreboard для показа счета



# Запуск бота
if __name__ == '__main__':
    bot.polling(none_stop=True)


